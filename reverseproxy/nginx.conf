events {}

http {
	# Load Lua module
	# lua_package_path "/path/to/lua/scripts/?.lua;;";

	upstream jf {
		server jellyfin:8095;
	}

	upstream im {
		server immich_server:2283;
	}

	server {

		listen 8096 ssl;
		server_name jb.servebeer.com;

		ssl_certificate /certs/cert.pem;
		ssl_certificate_key /certs/key.pem;

		location /jf {

			proxy_pass http://jellyfin:8095;

			proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";


			# # Rewrite URLs in the response
			# sub_filter 'href="/' 'href="/jf/';
			# sub_filter 'src="/' 'src="/jf/';
			# sub_filter 'action="/' 'action="/jf/';
			# sub_filter_once off; # Apply to all occurrences
			#
			# # Enable body filtering using Lua
			# body_filter_by_lua_block {
			# 	local chunk, eof = ngx.arg[1], ngx.arg[2]
			#
			# 		-- Define the regex pattern to match URLs
			# 		local url_pattern = [[(https?://[^/]+)(/?)]]
			#
			# 		-- Append "foo" to the base URL using regex substitution
			# 		local modified_chunk = ngx.re.gsub(chunk, url_pattern, function(match)
			# 		local base_url = match[1]
			# 		local path = match[2] or ""
			# 		return base_url .. "/foo" .. path
			# 		end, "jo")
			#
			# 		-- Pass the modified chunk back to NGINX
			# 		ngx.arg[1] = modified_chunk
			# 	}
		}

		location /im {
			proxy_pass http://im/;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}

		# location / {
		# 	proxy_pass http://backend;
		# }
	}
}
